name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: |
          cd app
          npm ci

      - name: Run tests
        run: |
          cd app
          npm test -- --passWithNoTests

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Build and start all services
        run: |
          docker-compose -f docker-compose.yml up -d --force-recreate
          cd monitoring
          docker-compose -f docker-compose.monitoring.yml up -d --force-recreate
          docker-compose logs
          docker-compose ps

      - name: Wait for webapp to be healthy
        run: |
          for i in {1..30}; do
            if curl -fs http://localhost:3000/api/health; then
              echo "Webapp is healthy!"
              exit 0
            fi
            sleep 5
          done
          echo "Webapp did not become healthy in time" >&2
          docker-compose logs
          exit 1

      - name: Show running containers
        run: docker ps -a

      - name: Show logs if failed
        if: failure()
        run: docker-compose logs

      - name: Tear down
        if: always()
        run: docker-compose -f docker-compose.yml -f monitoring/docker-compose.monitoring.yml down

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/devops_github
            git pull
            docker-compose pull
            docker-compose up -d
            docker-compose -f monitoring/docker-compose.monitoring.yml up -d
      - name: Health check
        run: |
          echo "Running health checks..."
          # Add health check commands here
          curl -f http://ec2-15-207-222-50.ap-south-1.compute.amazonaws.com:3000/api/health || exit 1
      - name: Notify deployment
        if: always()
        run: |
          echo "Deployment status: ${{ job.status }}"
          # Add notification logic here (Slack, Discord, etc.)