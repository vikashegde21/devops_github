name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: |
          cd app
          npm ci

      - name: Run tests
        run: |
          cd app
          npm test -- --passWithNoTests

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Build and start all services
        run: |
          docker-compose -f docker-compose.yml up -d --force-recreate
          cd monitoring
          docker-compose -f docker-compose.monitoring.yml up -d --force-recreate
          docker-compose logs
          docker-compose ps

      - name: Wait for webapp to be healthy
        run: |
          for i in {1..30}; do
            if curl -fs http://localhost:3000/api/health; then
              echo "Webapp is healthy!"
              exit 0
            fi
            sleep 5
          done
          echo "Webapp did not become healthy in time" >&2
          docker-compose logs
          exit 1

      - name: Show running containers
        run: docker ps -a

      - name: Show logs if failed
        if: failure()
        run: docker-compose logs

      - name: Tear down
        if: always()
        run: docker-compose -f docker-compose.yml -f monitoring/docker-compose.monitoring.yml down

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/devops_github
            
            # Pull latest code
            git pull origin main
            
            # Login to Docker registry (if using private images)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest images
            docker-compose pull
            
            # Stop existing containers gracefully
            docker-compose -f docker-compose.yml -f monitoring/docker-compose.monitoring.yml down
            
            # Start services
            docker-compose up -d
            docker-compose -f monitoring/docker-compose.monitoring.yml up -d
            
            # Clean up unused images
            docker image prune -f
            
      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
      - name: Health check
        run: |
          echo "Running health checks..."
          echo "Checking if application is accessible..."

          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} '
            echo "=== Container Status ==="
            docker ps
            echo "=== Port Usage ==="
            sudo netstat -tlnp | grep 3000
            echo "=== Docker Compose Status ==="
            cd /home/ec2-user/devops_github && docker-compose ps
          '

          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            if curl -f http://${{ secrets.EC2_HOST }}:3000/api/health; then
              echo "✅ Health check passed!"
              exit 0
            elif curl -f http://${{ secrets.EC2_HOST }}:3000; then
              echo "✅ Application is responding (health endpoint may not exist)"
              exit 0
            fi
            echo "❌ Health check failed, attempt $attempt/$max_attempts"
            sleep 10
            attempt=$((attempt + 1))
          done

          echo "❌ Health check failed after $max_attempts attempts"
          echo "Checking final status..."
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} '
            set -e
            cd /home/ec2-user/devops_github
            echo "=== Final Container Logs ==="
            docker-compose logs --tail=20
            echo "Pulling latest code from GitHub..."
            #git reset --hard HEAD  # optional: force clean local state
            git pull origin main
            echo "Rebuilding and restarting containers..."
            docker compose down
            docker compose up -d --build
          '
          exit 1
      - name: Notify deployment
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
          # Add notification logic here (Slack, Discord, etc.)